#!/bin/bash

# plython - interpreter polskiego Pythona
# Autor: Krzysztof "shieldziak" Tarczyński
# Licencja: MIT
# Wersja: 0.2
# Opis: Tłumaczy polskie słowa kluczowe na Python i uruchamia kod

set -euo pipefail  # Tryb strict

VERSION="0.2"

show_help() {
    cat << EOF
plython - Interpreter polskiego Pythona

UŻYCIE:
    plython [OPCJE] plik.ply [argumenty...]

OPCJE:
    -h, --help     Pokaż tę pomoc
    -v, --version  Pokaż wersję
    -d, --debug    Tryb debugowania (pokaż przetłumaczony kod)
    --no-run       Tylko przetłumacz, nie uruchamiaj

PRZYKŁADY:
    plython hello.ply
    plython -d my_script.ply arg1 arg2
    plython --no-run test.ply

OBSŁUGIWANE SŁOWA KLUCZOWE:
    funkcja -> def, klasa -> class, jeżeli -> if, inaczej -> else
    dla -> for, w -> in, dopóki -> while, zwróć -> return
    drukuj -> print, prawda -> True, fałsz -> False
    tekst -> str, liczba -> int, lista -> list
    i więcej...
EOF
}

show_version() {
    echo "plython $VERSION"
}

# Domyślne ustawienia
DEBUG=false
NO_RUN=false
PLIK=""

# Parsowanie argumentów
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            show_version
            exit 0
            ;;
        -d|--debug)
            DEBUG=true
            shift
            ;;
        --no-run)
            NO_RUN=true
            shift
            ;;
        -*)
            echo "Błąd: Nieznana opcja $1" >&2
            echo "Użyj 'plython --help' aby zobaczyć pomoc" >&2
            exit 1
            ;;
        *)
            PLIK="$1"
            shift
            break
            ;;
    esac
done

# Sprawdź czy podano plik
if [[ -z "$PLIK" ]]; then
    echo "Błąd: Nie podano pliku do wykonania" >&2
    echo "Użyj 'plython --help' aby zobaczyć pomoc" >&2
    exit 1
fi

# Sprawdź czy plik istnieje
if [[ ! -f "$PLIK" ]]; then
    echo "Błąd: Plik '$PLIK' nie istnieje!" >&2
    exit 1
fi

# Sprawdź czy plik ma rozszerzenie .ply
if [[ ! "$PLIK" =~ \.ply$ ]]; then
    echo "Ostrzeżenie: Plik nie ma rozszerzenia .ply" >&2
fi

# Tworzymy tymczasowy plik
TEMP_FILE=$(mktemp /tmp/plython_XXXXXX.py)

# Funkcja czyszcząca
cleanup() {
    rm -f "$TEMP_FILE"
}
trap cleanup EXIT INT TERM

# Słownik tłumaczeń - rozszerzony o type hints
declare -A TRANSLATIONS=(
    # Definicje
    ["funkcja"]="def"
    ["klasa"]="class"
    
    # Kontrola przepływu
    ["jeżeli"]="if"
    ["lubjeżeli"]="elif"
    ["albo"]="elif"
    ["inaczej"]="else"
    ["dopóki"]="while"
    ["dla"]="for"
    ["w"]="in"
    ["przerwij"]="break"
    ["kontynuuj"]="continue"
    ["przejdź"]="pass"
    
    # Wartości logiczne
    ["Prawda"]="True"
    ["prawda"]="True"
    ["Fałsz"]="False"
    ["fałsz"]="False"
    ["żaden"]="None"
    
    # Operatory logiczne
    ["i"]="and"
    ["lub"]="or"
    ["nie"]="not"
    ["jest"]="is"
    
    # Import i inne
    ["importuj"]="import"
    ["z"]="from"
    ["jako"]="as"
    ["zwróć"]="return"
    
    # Obsługa błędów
    ["spróbuj"]="try"
    ["wyjątek"]="except"
    ["wreszcie"]="finally"
    ["podnieś"]="raise"
    
    # Zmienne
    ["globalne"]="global"
    ["nielokalne"]="nonlocal"
    
    # Funkcje wbudowane
    ["drukuj"]="print"
    ["wejście"]="input"
    ["długość"]="len"
    ["typ"]="type"
    ["przedział"]="range"
    ["zakres"]="range"
    ["wymiar"]="range"
    
    # Typy danych (dla type hints też)
    ["liczba"]="int"
    ["tekst"]="str"
    ["lista"]="list"
    ["słownik"]="dict"
    ["krotka"]="tuple"
    ["zbiór"]="set"
    ["bool"]="bool"
    ["logiczny"]="bool"
    ["float"]="float"
    ["rzeczywisty"]="float"
)

# Funkcja tłumacząca - ulepszona
translate_file() {
    local input_file="$1"
    local output_file="$2"
    
    # Skopiuj oryginalny plik
    cp "$input_file" "$output_file"
    
    # Pierwsza faza: podstawowe tłumaczenia słów kluczowych
    for polish in "${!TRANSLATIONS[@]}"; do
        sed -i "s/\b${polish}\b/${TRANSLATIONS[$polish]}/g" "$output_file"
    done
    
    # Druga faza: specjalne przypadki i poprawki
    
    # Napraw problem z podwójnym 'in in'
    sed -i 's/ in in / in /g' "$output_file"
    
    # Napraw 'from import' bez słowa między
    sed -i 's/from import/from import/g' "$output_file"
    
    # Napraw składnię def - dodaj dwukropek na końcu linii z def
    sed -i 's/^def \([^:]*\)$/def \1:/g' "$output_file"
}

# Wykonaj tłumaczenie
translate_file "$PLIK" "$TEMP_FILE"

# Sprawdź składnię Pythona
if ! python3 -m py_compile "$TEMP_FILE" 2>/dev/null; then
    echo "Ostrzeżenie: Przetłumaczony kod może zawierać błędy składniowe" >&2
    if [[ "$DEBUG" == true ]]; then
        echo "Błędy składni:"
        python3 -m py_compile "$TEMP_FILE"
    fi
fi

# Pokaż przetłumaczony kod jeśli debug
if [[ "$DEBUG" == true ]]; then
    echo "=== Kod oryginalny ==="
    cat "$PLIK"
    echo
    echo "=== Przetłumaczony kod ==="
    cat "$TEMP_FILE"
    echo "======================="
fi

# Uruchom kod jeśli nie ma flagi --no-run
if [[ "$NO_RUN" == false ]]; then
    if [[ "$DEBUG" == false ]]; then
        echo "Uruchamianie: $(basename "$PLIK")"
        echo "----------------------------------------"
    fi
    python3 "$TEMP_FILE" "$@"
fi
